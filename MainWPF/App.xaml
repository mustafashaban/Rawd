<Application x:Class="MainWPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:Local="clr-namespace:MainWPF"
             xmlns:wtk="http://schemas.xceed.com/wpf/xaml/toolkit"
    StartupUri="ProjectControls/SplashWindow.xaml" ShutdownMode="OnMainWindowClose" Startup="Application_Startup">



    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resourses/ScrollBar.xaml"></ResourceDictionary>
                <ResourceDictionary Source="/Resourses/Buttons.xaml"></ResourceDictionary>
                <ResourceDictionary Source="/Resourses/DataGrid.xaml"></ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>

            <FontFamily x:Key="MyFontFamily">GE SS Two Light, /MainWPF;component/Fonts/#GE SS Two Light</FontFamily>
            <FontFamily x:Key="MyFontFamilyBold">GE SS Two Bold, /MainWPF;component/Fonts/#GE SS Two Bold</FontFamily>
            <FontFamily x:Key="MyFontFamilyMedium">GE SS Two Medium, /MainWPF;component/Fonts/#GE SS Two Medium</FontFamily>
            <FontFamily x:Key="BarCodeFont">/MainWPF;component/Fonts/#IDAHC39M Code 39 Barcode</FontFamily>
            <LinearGradientBrush x:Key="MyTabContainerBrush" StartPoint="0.5,0.5" EndPoint="1,0" SpreadMethod="Reflect">
                <GradientStop Color="#FF2FD84D" Offset="0"/>
                <GradientStop Color="#FF0E0F0E" Offset="1.1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="MyBrushWindow" StartPoint="0.5,0.5" EndPoint="1,0" SpreadMethod="Reflect">
                <GradientStop Color="#FF2FD84D" Offset="0"/>
                <GradientStop Color="#FF0E0F0E" Offset="0.95"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="MyTabItemBrush" StartPoint="0.9,0.5" EndPoint="0,0">
                <GradientStop Color="#FF244227" Offset="0"/>
                <GradientStop Color="#FFA7FF93" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="MyTabItemBrush2" StartPoint="0.9,0.5" EndPoint="0,0">
                <GradientStop Color="#FF244227" Offset="0"/>
                <GradientStop Color="#FFFFF37D" Offset="1"/>
            </LinearGradientBrush>
            
            <ControlTemplate x:Key="ValidationControlTemplateUnFocused">
                <Grid>
                    <AdornedElementPlaceholder Name="adornerPlaceholder"></AdornedElementPlaceholder>
                    <Image x:Name="img" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,5,0" Width="20">
                        <Image.Source>
                            <BitmapImage DecodePixelWidth="20" UriSource="/MainWPF;component/Images/DELETE.PNG" ></BitmapImage>
                        </Image.Source>
                    </Image>
                </Grid>
            </ControlTemplate>
            <ControlTemplate x:Key="ValidationControlTemplate">
                <DockPanel LastChildFill="True">
                    <Border x:Name="brdr" DockPanel.Dock="Bottom" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,0" CornerRadius="2" RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <TranslateTransform x:Name="tt"/>
                        </Border.RenderTransform>
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FFA80B0B" Offset="0"/>
                                <GradientStop Color="#FFDA4242" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <TextBlock HorizontalAlignment="Left" Foreground="WhiteSmoke" FontSize="12" Margin="5,4" Text="{Binding AdornedElement.(Validation.Errors)[0].ErrorContent, ElementName=adornerPlaceholder}"/>
                    </Border>
                    <Border DockPanel.Dock="Top">
                        <AdornedElementPlaceholder Name="adornerPlaceholder"></AdornedElementPlaceholder>
                    </Border>
                </DockPanel>
                <ControlTemplate.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="brdr" Storyboard.TargetProperty="Opacity" From="0.3" To="1" Duration="0:0:0.1"></DoubleAnimation>
                                <DoubleAnimation Storyboard.TargetName="tt" Storyboard.TargetProperty="X" From="-20" To="0" Duration="0:0:0.1"></DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            
            <Style TargetType="DatePickerTextBox">
                <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
                <Setter Property="Text" Value=" "></Setter>
                <Setter Property="FontFamily" Value="Times New Roman"></Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="#FFFBE0D9" />
                        <Setter Property="BorderThickness" Value="0.1"></Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="DatePicker">
                <Setter Property="SelectedDateFormat" Value="Short"/>
                <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
                <Setter Property="FontFamily" Value="Arial"></Setter>
                <Setter Property="BorderThickness" Value="0"></Setter>
                <Setter Property="FontSize" Value="16"></Setter>
                <Setter Property="Height" Value="28"></Setter>
                <Setter Property="Width" Value="150"></Setter>
                <Setter Property="VerticalAlignment" Value="Center"></Setter>
                <Setter Property="HorizontalAlignment" Value="Center"></Setter>
                <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplateUnFocused}"></Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="#FFFBE0D9" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeyboardFocusWithin" Value="True"></Condition>
                            <Condition Property="Validation.HasError" Value="True"></Condition>
                        </MultiTrigger.Conditions>
                        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplate}"></Setter>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="Calendar">
                <Setter Property="RenderTransform" >
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleX="1.05" ScaleY="1.3"></ScaleTransform>
                            <TranslateTransform X="-4" Y="-10"></TranslateTransform>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <Setter Property="FontFamily" Value="{StaticResource MyFontFamily}" />
            </Style>
            <Style TargetType="wtk:DateTimePicker">
                <Setter Property="FontFamily" Value="Arial" />
                <Setter Property="FontSize" Value="20" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextAlignment" Value="Left" />
                <Setter Property="Width" Value="150" />
                <Setter Property="Format" Value="Custom" />
                <Setter Property="FormatString" Value="dd-MM-yyyy" />
                <Setter Property="Margin" Value="5"/>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="#FFFBE0D9" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type wtk:TimePicker}">
                <Setter Property="Visibility" Value="Hidden"></Setter>
            </Style>
            
            <Style x:Key="MyRadioStyle" TargetType="RadioButton">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="MinWidth" Value="75" />
                <Setter Property="Margin" Value="8" />
                <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleX="1.45" ScaleY="1.45"/>
                            <SkewTransform/>
                            <RotateTransform/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="MyRadioStyleEV" TargetType="RadioButton">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Width" Value="70" />
                <Setter Property="Margin" Value="5" />
                <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleX="1.2" ScaleY="1.2"/>
                            <SkewTransform/>
                            <RotateTransform/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="LargeCheckBox" TargetType="CheckBox">
                <Setter Property="Height" Value="15"></Setter>
                <Setter Property="Width" Value="15"></Setter>
                <Setter Property="FlowDirection" Value="LeftToRight"></Setter>
                <Setter Property="RenderTransformOrigin" Value="0.5,0.5"></Setter>
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="2" ScaleY="2"></ScaleTransform>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="FontFamily" Value="{StaticResource MyFontFamily}" />
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="FontSize" Value="14"></Setter>
                <Setter Property="MaxLength" Value="30"></Setter>
                <Setter Property="VerticalAlignment" Value="Center"></Setter>
                <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
                <Setter Property="Margin" Value="8,0"></Setter>
                <Setter Property="Height" Value="28"></Setter>
                <Setter Property="FontFamily" Value="{StaticResource MyFontFamily}"></Setter>
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplateUnFocused}"></Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="#FFFBE0D9" />
                        <Setter Property="BorderThickness" Value="1"></Setter>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeyboardFocusWithin" Value="True"></Condition>
                            <Condition Property="Validation.HasError" Value="True"></Condition>
                        </MultiTrigger.Conditions>
                        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplate}"></Setter>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="PasswordBox">
                <Setter Property="FontSize" Value="14"></Setter>
                <Setter Property="ToolTipService.IsEnabled" Value="False"></Setter>
                <Setter Property="VerticalAlignment" Value="Center"></Setter>
                <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
                <Setter Property="Margin" Value="8,2"></Setter>
                <Setter Property="Height" Value="30"></Setter>
                <Setter Property="FontFamily" Value="{StaticResource MyFontFamily}"></Setter>
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplateUnFocused}"></Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="#FFFBE0D9" />
                        <Setter Property="BorderThickness" Value="1"></Setter>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeyboardFocusWithin" Value="True"></Condition>
                            <Condition Property="Validation.HasError" Value="True"></Condition>
                        </MultiTrigger.Conditions>
                        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplate}"></Setter>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="ComboBox">
                <Setter Property="FontSize" Value="14"></Setter>
                <Setter Property="VerticalAlignment" Value="Center"></Setter>
                <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
                <Setter Property="Margin" Value="8,0"></Setter>
                <Setter Property="Height" Value="28"></Setter>
                <Setter Property="FontFamily" Value="{StaticResource MyFontFamily}"></Setter>
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplateUnFocused}"></Setter>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="BorderThickness" Value="2"></Setter>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Validation.ErrorTemplate">
                            <Setter.Value>
                                <ControlTemplate>
                                    <AdornedElementPlaceholder></AdornedElementPlaceholder>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsEnabled" Value="True"></Condition>
                            <Condition Property="IsKeyboardFocusWithin" Value="True"></Condition>
                            <Condition Property="Validation.HasError" Value="True"></Condition>
                        </MultiTrigger.Conditions>
                        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplate}"></Setter>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="Local:NumericUpDown">
                <Setter Property="Minimum" Value="0" />
                <Setter Property="Maximum" Value="100" />
                <Setter Property="Width" Value="120" />
                <Setter Property="FontFamily" Value="Arial"></Setter>
                <Setter Property="FontSize" Value="14"></Setter>
                <Setter Property="HorizontalAlignment" Value="Left"></Setter>
                <Setter Property="Margin" Value="8,1"></Setter>
                <Setter Property="VerticalAlignment" Value="Center"></Setter>
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplateUnFocused}"></Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeyboardFocusWithin" Value="True"></Condition>
                            <Condition Property="Validation.HasError" Value="True"></Condition>
                        </MultiTrigger.Conditions>
                        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplate}"></Setter>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="wtk:DoubleUpDown">
                <Setter Property="Minimum" Value="0" />
                <Setter Property="Maximum" Value="100" />
                <Setter Property="FontFamily" Value="Arial"></Setter>
                <Setter Property="FontSize" Value="14"></Setter>
                <Setter Property="HorizontalAlignment" Value="Left"></Setter>
                <Setter Property="Margin" Value="5,2"></Setter>
                <Setter Property="VerticalAlignment" Value="Center"></Setter>
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplateUnFocused}"></Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeyboardFocusWithin" Value="True"></Condition>
                            <Condition Property="Validation.HasError" Value="True"></Condition>
                        </MultiTrigger.Conditions>
                        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationControlTemplate}"></Setter>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="Control">
                <Setter Property="FontFamily" Value="Arial"></Setter>
            </Style>

            <Storyboard x:Key="sbRotateButton" RepeatBehavior="Forever">
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(Angle)" From="0" To="-360" Duration="0:0:1.5" />
            </Storyboard>
            <Style x:Key="RefreshButtonStyle" TargetType="Button">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform x:Name="rt" Angle="0"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border >
                                <Image>
                                    <Image.Source>
                                        <BitmapImage DecodePixelWidth="50" UriSource="/MainWPF;component/Images/update.png"></BitmapImage>
                                    </Image.Source>
                                </Image>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="FocusVisualStyle" >
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>


            <!--zzzzzz-->
            <Style x:Key="CUD_Style" TargetType="Button">
                <Setter Property="FlowDirection" Value="LeftToRight"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Grid>
                                <Border x:Name="brdr" BorderBrush="Black" BorderThickness=".5" Background="#FFECECEC" Opacity="0"></Border>
                                <ContentPresenter Margin="2" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="brdr" Property="Background" Value="#FFCBCBCB"></Setter>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="brdr" Storyboard.TargetProperty="Opacity" To="1"></DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.3" Storyboard.TargetName="brdr" Storyboard.TargetProperty="Opacity" To="0"></DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="MyWindowStyle" TargetType="Window">
                <Setter Property="ResizeMode" Value="NoResize"></Setter>
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FF3DC374" Offset="0"/>
                            <GradientStop Color="#FF0F6A3D" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="FlowDirection" Value="RightToLeft"></Setter>
                <Setter Property="WindowStyle" Value="None"></Setter>
                <Setter Property="AllowsTransparency" Value="True"></Setter>
                <Setter Property="Background" Value="Transparent"></Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Window">
                            <Grid FlowDirection="{TemplateBinding FlowDirection}" Background="Transparent" RenderTransformOrigin="0.5,0.5">
                                <Border x:Name="ContentRoot" Background="{TemplateBinding BorderBrush}" RenderTransformOrigin="0.5,0.5" Margin="20" BorderBrush="#FF174F31" BorderThickness="5" CornerRadius="5">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <Grid x:Name="grdContainer">
                                        <Border BorderThickness="0" Panel.ZIndex="1" CornerRadius="30" Width="50" Height="50" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="-20">
                                            <Border x:Name="brdr" BorderThickness="5" Panel.ZIndex="1" CornerRadius="30" BorderBrush="#FF174F31" Width="50" Height="50" VerticalAlignment="Top" HorizontalAlignment="Left">
                                                <Border.Background>
                                                    <SolidColorBrush x:Name="brdrColor" Color="#FF174F31"></SolidColorBrush>
                                                </Border.Background>
                                                <Button x:Name="btnExit" IsCancel="True" IsTabStop="False" Click="btnExit_Click" Style="{x:Null}" Cursor="Hand" BorderThickness="0" BorderBrush="#FF174F31" Background="#FF000F0B">
                                                    <Button.Template>
                                                        <ControlTemplate TargetType="{x:Type Button}">
                                                            <Grid x:Name="grid" >
                                                                <VisualStateManager.VisualStateGroups>
                                                                    <VisualStateGroup x:Name="CommonStates">
                                                                        <VisualState x:Name="Normal">
                                                                            <Storyboard>
                                                                                <ColorAnimation Duration="0:0:0.2" To="#FF781B16" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="O"/>
                                                                            </Storyboard>
                                                                        </VisualState>
                                                                        <VisualState x:Name="MouseOver">
                                                                            <Storyboard>
                                                                                <ColorAnimation Duration="0:0:0.2" To="#FFB22820" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="O"/>
                                                                                <DoubleAnimation Duration="0" To="0.95" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="X"/>
                                                                            </Storyboard>
                                                                        </VisualState>
                                                                        <VisualState x:Name="Pressed">
                                                                            <Storyboard>
                                                                                <DoubleAnimation Duration="0" To="0.85" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="X"/>
                                                                                <ColorAnimation Duration="0" To="Yellow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="X"/>
                                                                            </Storyboard>
                                                                        </VisualState>
                                                                    </VisualStateGroup>
                                                                </VisualStateManager.VisualStateGroups>
                                                                <Rectangle x:Name="O" Fill="#FF781B16" StrokeThickness="0" RadiusX="20" RadiusY="20"></Rectangle>
                                                                <Path Fill="White" x:Name="X" Data="F1 M 6.742676,3.852539 L 9.110840,1.559570 L 8.910645,0.500000 L 6.838379,0.500000 L 4.902832,2.435547 L 2.967285,0.500000 L 0.895020,0.500000 L 0.694824,1.559570 L 3.062988,3.852539 L 0.527832,6.351563 L 0.689941,7.600586 L 2.967285,7.600586 L 4.897949,5.575195 L 6.854004,7.600586 L 9.115723,7.600586 L 9.277832,6.351563 L 6.742676,3.852539 Z" HorizontalAlignment="Center" Margin="10" Stretch="Fill" VerticalAlignment="Center" />
                                                            </Grid>
                                                        </ControlTemplate>
                                                    </Button.Template>
                                                </Button>
                                            </Border>
                                        </Border>
                                        <AdornerDecorator Margin="10">
                                            <ContentPresenter/>
                                        </AdornerDecorator>
                                    </Grid>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="Window.Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetProperty="(RenderTransform).(Children)[0].ScaleX" Storyboard.TargetName="ContentRoot">
                                                <SplineDoubleKeyFrame KeyTime="0" Value="0.9"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseInOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetProperty="(RenderTransform).(Children)[0].ScaleY" Storyboard.TargetName="ContentRoot">
                                                <SplineDoubleKeyFrame KeyTime="0" Value="0.9"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseInOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ContentRoot">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseInOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            
            
            
        </ResourceDictionary>
    </Application.Resources>
</Application>
