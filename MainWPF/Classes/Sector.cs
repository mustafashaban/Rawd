using System; using System.Collections.Generic; using System.Data.SqlClient; using System.Linq; using System.Web;  namespace MainWPF {     public class Sector : ModelViewContext     {         private int? id;         public int? ID         {             get             { return id; }             set             { id = value; }         }          private string name;         public string Name         {             get             { return name; }             set             { name = value; }         }          private string code;         public string Code         {             get             { return code; }             set             { code = value; }         }          private int? inventoryid;         public int? InventoryID         {             get             { return inventoryid; }             set             { inventoryid = value; }         }          private int? lastuserid;         public int? LastUserID         {             get             { return lastuserid; }             set             { lastuserid = value; }         }          private int? nextOrderDays;         public int? NextOrderDays         {             get             { return nextOrderDays; }             set             { nextOrderDays = value; }         }

        private bool isPresentable;         public bool IsPresentable         {             get             { return isPresentable; }             set             { isPresentable = value; NotifyPropertyChanged("IsPresentable"); }         }

        private bool isActive;         public bool IsActive         {             get             { return isActive; }             set             { isActive = value; NotifyPropertyChanged("IsActive"); }         }          private bool isSelected;         public bool IsSelected         {             get             { return isSelected; }             set             { isSelected = value; NotifyPropertyChanged("IsSelected"); }         }

        internal bool CanRemove()         {             try             {                 string sql = $"select(select count(*) from FormedBasket_Sector where SectorID = {ID}) + (select count(*) from Family where SectorID = {ID})";                 var result = BaseDataBase._Scalar(sql);                 int n;                 if (int.TryParse(result, out n) && n > 0)                     return false;                 return true;             }             catch (Exception ex) { MyMessageBox.Show(ex.Message); return false; }         }          internal bool IsValidate()         {              bool isValid = true;             this.ClearAllErrors();             if (string.IsNullOrEmpty(Name))             {                 SetError("Name", "قيمة اجبارية");                 isValid = false;             }             if (string.IsNullOrEmpty(Code))             {                 SetError("Code", "قيمة اجبارية");                 isValid = false;             }             else if (Code == "Z" || Code == "z")
            {
                SetError("Code", "لا يمكن اختيار الحرف Z لانه محجوز للعوائل المؤقتة فقط\nيجب اختيار حرف اخر");                 isValid = false;
            }             if (!InventoryID.HasValue)             {                 SetError("InventoryID", "قيمة اجبارية");                 isValid = false;             }             if (!isValid)             {                 string s = "";                 foreach (var item in errors)                     s += item.Value + "\n";                 MyMessageBox.Show(s);             }             return isValid;         }

        public static bool InsertData(Sector x)         {             x.ID = BaseDataBase._StoredProcedureReturnable("sp_Add_Sector"             , new SqlParameter("@ID", System.Data.SqlDbType.Int)             , new SqlParameter("@Name", x.Name)             , new SqlParameter("@Code", x.Code)             , new SqlParameter("@InventoryID", x.InventoryID)             , new SqlParameter("@NextOrderDays", x.NextOrderDays)             , new SqlParameter("@isPresentable", x.isPresentable)             , new SqlParameter("@IsActive", x.IsActive)             , new SqlParameter("@LastUserID", BaseDataBase.CurrentUser.ID));             return x.ID.HasValue;         }         public static bool UpdateData(Sector x)         {             return BaseDataBase._StoredProcedure("sp_Update_Sector"             , new SqlParameter("@ID", x.ID)             , new SqlParameter("@Name", x.Name)             , new SqlParameter("@Code", x.Code)             , new SqlParameter("@InventoryID", x.InventoryID)             , new SqlParameter("@NextOrderDays", x.NextOrderDays)             , new SqlParameter("@isPresentable", x.isPresentable)             , new SqlParameter("@IsActive", x.IsActive)             , new SqlParameter("@LastUserID", BaseDataBase.CurrentUser.ID));         }         public static bool DeleteData(Sector x)         {             return BaseDataBase._StoredProcedure("sp_Delete_Sector"             , new SqlParameter("@ID", x.ID));         }          internal static int GetInventoryByFamilyID(int? familyID)         {             try             {                 return int.Parse(BaseDataBase._Scalar($"select InventoryID from Sector where Id = (select SectorID from Family where FamilyID = {familyID})"));             }             catch { return -1; }         }         public static Sector GetSectorByID(int id)         {             Sector x = new Sector();             SqlConnection con = new SqlConnection(BaseDataBase.ConnectionString);             SqlCommand com = new SqlCommand("sp_Get_ID_Sector", con);             com.CommandType = System.Data.CommandType.StoredProcedure;             SqlParameter pr = new SqlParameter("@ID", id);             com.Parameters.Add(pr);             try             {                 con.Open();                 SqlDataReader rd = com.ExecuteReader();                 if (rd.Read())                 {                     if (!(rd["ID"] is DBNull))                         x.ID = int.Parse(rd["ID"].ToString());                     x.Name = rd["Name"].ToString();                     x.Code = rd["Code"].ToString();                     if (!(rd["InventoryID"] is DBNull))                         x.InventoryID = int.Parse(rd["InventoryID"].ToString());                     if (!(rd["LastUserID"] is DBNull))                         x.LastUserID = int.Parse(rd["LastUserID"].ToString());                     if (!(rd["NextOrderDays"] is DBNull))                         x.NextOrderDays = int.Parse(rd["NextOrderDays"].ToString());                     if (!(rd["IsPresentable"] is DBNull))                         x.IsPresentable = bool.Parse(rd["IsPresentable"].ToString());                     if (!(rd["IsActive"] is DBNull))                         x.IsActive = bool.Parse(rd["IsActive"].ToString());                 }                 rd.Close();             }             catch             {                 x = null;             }             finally             {                 con.Close();             }             return x;         }         public static List<Sector> GetAllSector()         {             List<Sector> xx = new List<Sector>();             SqlConnection con = new SqlConnection(BaseDataBase.ConnectionString);             SqlCommand com = new SqlCommand("sp_Get_All_Sector", con);             com.CommandType = System.Data.CommandType.StoredProcedure;             try             {                 con.Open();                 SqlDataReader rd = com.ExecuteReader();                 while (rd.Read())                 {                     Sector x = new Sector();                      if (!(rd["ID"] is DBNull))                         x.ID = int.Parse(rd["ID"].ToString());                     x.Name = rd["Name"].ToString();                     x.Code = rd["Code"].ToString();                     if (!(rd["InventoryID"] is DBNull))                         x.InventoryID = int.Parse(rd["InventoryID"].ToString());                     if (!(rd["LastUserID"] is DBNull))                         x.LastUserID = int.Parse(rd["LastUserID"].ToString());                     if (!(rd["NextOrderDays"] is DBNull))                         x.NextOrderDays = int.Parse(rd["NextOrderDays"].ToString());                     if (!(rd["IsPresentable"] is DBNull))                         x.IsPresentable = bool.Parse(rd["IsPresentable"].ToString());                     if (!(rd["IsActive"] is DBNull))                         x.IsActive = bool.Parse(rd["IsActive"].ToString());                     xx.Add(x);                 }                 rd.Close();             }             catch             {                 xx = new List<MainWPF.Sector>();             }             finally             {                 con.Close();             }             return xx;         }          public static List<Sector> GetAllSectorByFormedBasketID(int FormedBasketID)         {             List<Sector> xx = new List<Sector>();             SqlConnection con = new SqlConnection(BaseDataBase.ConnectionString);             SqlCommand com = new SqlCommand("Get_All_Sector_ByFormedBasketID", con);             com.CommandType = System.Data.CommandType.StoredProcedure;             com.Parameters.Add(new SqlParameter("@FormedBasketID", FormedBasketID));             try             {                 con.Open();                 SqlDataReader rd = com.ExecuteReader();                 while (rd.Read())                 {                     Sector x = new Sector();                      if (!(rd["ID"] is DBNull))                         x.ID = int.Parse(rd["ID"].ToString());                     x.Name = rd["Name"].ToString();                     x.Code = rd["Code"].ToString();                     if (!(rd["InventoryID"] is DBNull))                         x.InventoryID = int.Parse(rd["InventoryID"].ToString());                     if (!(rd["IsSelected"] is DBNull))                         x.IsSelected = true;                     if (!(rd["LastUserID"] is DBNull))                         x.LastUserID = int.Parse(rd["LastUserID"].ToString());                     if (!(rd["NextOrderDays"] is DBNull))                         x.NextOrderDays = int.Parse(rd["NextOrderDays"].ToString());                     if (!(rd["IsPresentable"] is DBNull))                         x.IsPresentable = bool.Parse(rd["IsPresentable"].ToString());                     if (!(rd["IsActive"] is DBNull))                         x.IsActive = bool.Parse(rd["IsActive"].ToString());                     xx.Add(x);                 }                 rd.Close();             }             catch             {                 xx = new List<MainWPF.Sector>();             }             finally             {                 con.Close();             }             return xx;         }           public static List<Sector> GetSectorData         { get { return GetAllSector(); } }         public static List<Sector> GetActiveSectorData         { get { return GetAllSector().Where(x => x.IsActive).ToList(); } }      } }